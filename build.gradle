apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'

group = 'net.jmatrix'


description = """JSQL"""

sourceCompatibility = 1.7
targetCompatibility = 1.7

Properties versionProps=new Properties();
versionProps.load(new FileInputStream("${project.rootDir}/version.properties"))

version=versionProps.get("version")

repositories {
     maven { url "http://repo.maven.apache.org/maven2" }
}
dependencies {
    compile group: 'org.slf4j', name: 'slf4j-api', version:'1.7.7'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version:'2.3.2'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version:'2.3.2'
    compile group: 'jline', name: 'jline', version:'2.12'
    
    // drivers
    runtime files('jars/ojdbc7_g.jar')
    runtime group: 'mysql', name: 'mysql-connector-java', version:'5.1.33'
    runtime group: 'org.postgresql', name: 'postgresql', version: '9.4.1212'

    testCompile group: 'junit', name: 'junit', version:'4.8.2'
}

jar {
    manifest {
        attributes 'Main-Class': 'net.jmatrix.db.jsql.JSQL'
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

test {
    systemProperty 'console', 'true'
    systemProperty 'slfcc.debug', 'true'

//    afterTest { desc, result ->
//        println "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
//        println "--------------------------------------------------------"
//    }
    testLogging.showStackTraces true
    testLogging {
        showStandardStreams true
        showExceptions true
        showStackTraces true
        showCauses true
        exceptionFormat "full"
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

task buildProperties {
    doFirst {
       println("Building properties for version ")
       Properties props=new Properties();
       props.load(new FileInputStream("version.properties"))

       File file=new File("${projectDir}/build/resources/main/build.properties")
        println("Making parent dirs for "+file)
        File parent=file.getParentFile()
        println("Parent: "+parent.getAbsoluteFile())
        if (parent.getAbsoluteFile().mkdirs()) {
            println("succeeded in mkdir.")
        }else{
            println("Failed to mkdir.")
            //throw new Exception("Failed to create "+parent.getAbsoluteFile());
        }

       def date = new Date()
       def formattedDate = date.format('yyyyMMdd_HHmmss')
       
       props.setProperty("build.time", formattedDate)
       props.setProperty("version", versionProps.get("version"))
       props.setProperty("build_user", System.getProperty("user.name"))
        println("Writing properties to "+file.getAbsoluteFile())
        FileWriter fw=new FileWriter(file)
       props.list(System.out)
       props.store(fw, null)
        fw.flush()
        fw.close()
   }
}

processResources.dependsOn buildProperties
